<?php

    namespace app\control;
    
    require_once 'app/core/renderer.php';
    require_once 'app/control/game.controller.php';
    require_once 'app/control/turn.controller.php';
    require_once 'app/control/movement.controller.php';
    require_once 'app/control/user.controller.php';
    require_once 'app/control/tableState.controller.php';

    use app\core\CRenderer;
    use app\control\CGameController;
    use app\control\CTurnController;
    use app\model\CTableStateModel;
    use app\model\CUserModel;

    /*
     * This should be a wrapper for our main program flow.
     * Useful to have an overview.
     * 
     * Certainly this should be extended for your use. (for example different application states)
     */
    
    class CApplication{
        private $m_navigation  = array(
                                0 => array('page' => 'home', 'title' => 'Home'),
                                1 => array('page' => 'newGame', 'title' => 'Create New Game'),
                                2 => array('page' => 'game', 'title' => 'View Last Games'),
        );
        
        private $m_renderer    = null;
        private $m_REQUEST     = array();
        
        //title and description are only given for testing to the constructor (look at index.php to understand the progress)
        public function __construct($_applicationTitle, $_applicationSubtitle)
        {
            $this->m_title       = $_applicationTitle;
            $this->m_subtitle    = $_applicationSubtitle;
            $this->m_renderer    = CRenderer::getInstance(); // get an instance from the singleton renderer
            
            //feel free to use them ;) these are the global PHP requests
            $this->m_REQUEST     = array_merge($_GET, $_POST);
        }
        
        public function run()
        {
			
            if (!isset($this->m_REQUEST['renderOnlyContent'])) $this->renderHeader();
            $this->renderContent();
            if (!isset($this->m_REQUEST['renderOnlyContent'])) $this->renderFooter();
        }
        
		private function getLoginButton(){
			if(isset($_SESSION["user_id"])){
				$userModel = new CUserModel($_SESSION["user_id"]);
				return "Hallo" . $userModel->getName().'<a href="" class="" id="logoutBtn">Logout</a>';
			}else{
				return '<a href="" class="" id="loginBtn">Login</a>';
			}
		}
		
        private function getNavigationString()
        {
            $navigation = '';

            for($i = 0; $i < count($this->m_navigation); ++$i)
            {
                $navigation .= '<a href="?page='.$this->m_navigation[$i]['page'].'">'.$this->m_navigation[$i]['title'].'</a>';
            }
            
            return $navigation;
        }
        
        private function renderHeader()
        {
            $this->m_renderer->loadTemplate('header.html');
            $this->m_renderer->assign(array('title'       => isset($this->m_REQUEST['page']) ? $this->m_title . ' - ' . strtoupper($this->m_REQUEST['page']) : $this->m_title, 
                                            'assetPathCSS'   => 'app/view/assets/css/',
                                            'assetPathJS'   => 'app/view/assets/js/',
                                            'headline'    => $this->m_title,
                                            'subheadline' => $this->m_subtitle,
                                            'navigation'  => $this->getNavigationString(),
											'loginbuttons' => $this->getLoginButton()
											));
            $this->m_renderer->render();
			
			$userController = new CUserController();
			$userController->showLogin();
        }
        
        private function renderContent()
        {
            if(isset($this->m_REQUEST['page']))
            {
                switch ($this->m_REQUEST['page'])
                {
                    case 'home':

                        $this->m_renderer->loadTemplate('home.html');
                        $this->m_renderer->render();
                        break;
                        
                    case 'newGame':
                        $gameController = new CGameController();
						$gameController->createNewGame();
                        break;
						
					case 'game':
						$gameController = new CGameController();
                        if(isset($this->m_REQUEST['game_id'])){
                            $gameController->viewGameById($this->m_REQUEST['game_id']);
                        }else{
                            $gameController->viewAllGames();
                        }
						break;

                    case 'ajaxCallInsertAllUnitsFromGame':
                        $tableStateController = new CTableStateController();
                        $tableStateController->insertAllUnitsFromGame($this->m_REQUEST['unitData']);
                        break;
                    case 'ajaxCallGetAllUnitsFromGame':
                        $tableStateController = new CTableStateController();
                        $tableStateController->getAllUnitsFromGame($this->m_REQUEST['game_id']);
                        break;
                    case 'ajaxCallGetAllTurnsFromGame':
						$turnController = new CTurnController();
						$turnController->getAllTurnsFromGame($this->m_REQUEST['game_id']);
                        break;
                    case 'ajaxCallInsertMovement':
                        $movementController = new CMovementController();
                        $movementController->insertAllMovementsFromTurn($this->m_REQUEST['moveData']);
                        break;
                    case 'ajaxCallGetMovement':
                        $movementController = new CMovementController();
                        $movementController->getAllMovementsFromTurn($this->m_REQUEST['turn_id']);
                        break;
					
					case 'ajaxCallLoginUser':
						$userController = new CUserController();
						$userController->loginUser();
						break;
						
					case 'ajaxCallInsertUser':
						$userController = new CUserController();
						$userController->insertUser();
						break;
						
					case 'ajaxCallInsertMovement':
						$userController = new CUserController();
						$userController->insertUser();
						break;
						
					case 'ajaxCallLogout':
						session_destroy();
						echo $this->getLoginButton();
						break;
						
                    default:
                        
                        $this->m_renderer->loadTemplate('error.html');
                        $this->m_renderer->assign(array('errorcode' => 404, 'errormessage' => 'The requested page was not found.'));
                        $this->m_renderer->render();
                        
                        break;
                }
            }
            else
            {
                $this->m_renderer->loadTemplate('home.html');
				$this->m_renderer->assign(array('errorcode' => 404, 'errormessage' => 'The requested page was not found.'));
				$this->m_renderer->render();
            }
        }
        
        private function renderFooter()
        {
            $this->m_renderer->loadTemplate('footer.html');
            $this->m_renderer->render();
        }
    }
    
?>