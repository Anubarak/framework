<?php

namespace app\control;

require_once 'app/model/movement.model.php';

use app\core\CRenderer;
use app\control\CTurnController;
use app\model\CMovementModel;
use app\core\CDatabase;
use Exception;

class CMovementController
{
    private $m_renderer = null;

    public function __construct()
    {
        $this->m_renderer = CRenderer::getInstance();
    }

    public function getAllMovementsFromTurn($_turn_id)
    {
        try
        {
            $movementArray = CMovementModel::getAllMovementsFromTurnAsArray(intval($_turn_id));
            echo json_encode($movementArray);
        }
        catch (Exception $e)
        {
            $this->m_renderer->loadTemplate('error.html');
            $this->m_renderer->assign(array('errorcode' => 5000, 'errormessage' => $e->getMessage()));
            $this->m_renderer->render();
        }
    }


    public function insertAllMovementsFromTurn($_movement)
    {
        try
        {
            if(isset($_movement)){
                $db = CDatabase::getInstance();
                $game_id = $_GET["game_id"];

                $turnController = new CTurnController();
                $turnController->insertTurn($game_id);
                $turn_id = $db->getLastInsertedId();

                foreach($_movement as $move){
                    $x = $move["x"];
                    $y = $move["y"];
                    $db->prepare("INSERT INTO movement (game_id, x, y, turn_id) VALUES (?, ?, ?, ?)");
                    $db->bindParams(array($game_id, $x, $y, $turn_id));
                    $db->execute();
                }

                echo $turn_id;
            }
        }
        catch (Exception $e)
        {
            $this->m_renderer->loadTemplate('error.html');
            $this->m_renderer->assign(array('errorcode' => 5000, 'errormessage' => $e->getMessage()));
            $this->m_renderer->render();
        }
    }
}
    