<?php

namespace app\core;

use mysqli;

class CDatabase
{
    /*
     * singleton instance
     */

    private static $s_instance = null;

    /*
     * mysqli instance
     */
    private $m_mysqli = null;
    private $m_statement = null;
    private $m_result = null;


     // connection settings
/*
     private $m_username = 'anubarak16';
     private $m_password = 'root';
     private $m_host = 'localhost';
     private $m_database = 'anubarak16';
*/


     private $m_username = 'root';
     private $m_password = '';
     private $m_host = 'localhost';
     private $m_database = 'terrabattle';

    private function __construct()
    {
        // Ensure reporting is setup correctly
        mysqli_report(MYSQLI_REPORT_STRICT | MYSQLI_REPORT_ERROR);

        try
        {
            $this->m_mysqli = new mysqli($this->m_host, $this->m_username, $this->m_password, $this->m_database);
            $this->m_mysqli->set_charset("utf8");
        }
        catch (Exception $e)
        {
            echo $e->getMessage();
        }
    }

    private function __clone()
    {

    }

    public static function getInstance()
    {
        if (null === self::$s_instance)
        {
            self::$s_instance = new self;
        }

        return self::$s_instance;
    }

    public function query($_queryString)
    {
        try
        {
            return $this->m_mysqli->query($_queryString);
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    public function prepare($_queryString)
    {
        try
        {
            $this->m_statement = $this->m_mysqli->prepare($_queryString);
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    public function bindParams($_values = array())
    {
        try
        {
            if (count($_values) !== 0)
            {
                $types = '';
                foreach ($_values as $value)
                {
                    $types .= $this->getParamType($value);
                }
                call_user_func_array(array($this->m_statement, 'bind_param'), array_merge(array($types), $this->referenceValues($_values)));
            }
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    public function execute()
    {
        try
        {
            return $this->m_statement->execute();
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    public function fetch()
    {
        try
        {
            return $this->m_statement->get_result();
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    public function getLastInsertedId()
    {
        try
        {
            return $this->m_mysqli->insert_id;
        }
        catch (Exception $e)
        {
            throw $e;
        }
    }

    private function getParamType($_param)
    {
        switch (gettype($_param))
        {
            case 'string' : return 's';
            case 'integer': return 'i';
            case 'blob' : return 'b';
            case 'double' : return 'd';
        }

        return '';
    }

    private function referenceValues($_values)
    {
        if (strnatcmp(phpversion(), '5.3') >= 0) //Reference is required for PHP 5.3+
        {
            $refs = array();

            foreach ($_values as $key => $value)
            {
                $refs[$key] = &$_values[$key];
            }

            return $refs;
        }

        return $_values;
    }

}
    